!pip install dash --upgrade
!pip install werkzeug --upgrade
pip install dash plotly

import pandas as pd
import numpy as np
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
data = pd.read_csv("1000 set Healthcare Providers.csv", encoding='latin-1')

# Data preprocessing
x = np.array(data["Number of Distinct Medicare Beneficiary/Per Day Services"]).reshape(-1, 1)
y = np.array(data["Average Medicare Standardized Amount"])

# Splitting dataset
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

# Model building
model = LinearRegression()
model.fit(x_train, y_train)
y_train_pred = model.predict(x_train)
y_test_pred = model.predict(x_test)

# Evaluation metrics
train_mse = mean_squared_error(y_train, y_train_pred)
train_r2 = r2_score(y_train, y_train_pred)
test_mse = mean_squared_error(y_test, y_test_pred)
test_r2 = r2_score(y_test, y_test_pred)

# Create the Dash app
app = dash.Dash(__name__)

# Define the layout
app.layout = html.Div(children=[
    html.H1(children='Linear Regression Dashboard', style={'textAlign': 'center', 'marginBottom': '30px'}),
    
    html.Div(children='''
        Training and Testing Results
    ''', style={'textAlign': 'center', 'marginBottom': '20px'}),
    
    html.Div(className='row', children=[
        html.Div(className='six columns', children=[
            dcc.Graph(
                id='training-scatter',
                figure={
                    'data': [
                        {'x': y_train.flatten(), 'y': y_train_pred.flatten(), 'mode': 'markers', 'name': 'Training'},
                        {'x': y_test.flatten(), 'y': y_test_pred.flatten(), 'mode': 'markers', 'name': 'Testing'},
                        {'x': [np.min(y_train), np.max(y_train)], 'y': [np.min(y_train), np.max(y_train)],
                         'mode': 'lines', 'name': 'Perfect Fit'}
                    ],
                    'layout': {
                        'title': 'Actual vs. Predicted (Training and Testing)',
                        'xaxis': {'title': 'Actual'},
                        'yaxis': {'title': 'Predicted'},
                        'height': 500
                    }
                }
            )
        ]),
        
        html.Div(className='six columns', children=[
            dcc.Graph(
                id='mse-r2',
                figure={
                    'data': [
                        {'x': ['Training', 'Testing'], 'y': [train_mse, test_mse], 'type': 'bar', 'name': 'MSE'},
                        {'x': ['Training', 'Testing'], 'y': [train_r2, test_r2], 'type': 'bar', 'name': 'R-squared'}
                    ],
                    'layout': {
                        'title': 'Mean Squared Error (MSE) and R-squared',
                        'xaxis': {'title': 'Dataset'},
                        'yaxis': {'title': 'Value'},
                        'height': 400
                    }
                }
            )
        ])
    ])
])

if __name__ == '__main__':
    app.run_server(debug=False)
